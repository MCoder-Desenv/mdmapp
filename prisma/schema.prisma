// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement()) // Alterado para Int
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  typeUser      String?
  password      String
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  answers       Answer[]        // Relacionamento com respostas
 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            Int            // Alterado para Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       Int      // Alterado para Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         Int  @unique // Alterado para Int
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Question {
  id           Int      @id @default(autoincrement())
  questionText String
  options      Option[] // Relacionamento com opções
  answers      Answer[] // Relacionamento com respostas
}

model Option {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  optionText String
  optionValue String
  answers    Answer[] // Relacionamento com respostas
}

model Answer {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  option     Option   @relation(fields: [optionId], references: [id])
  optionId   Int
  createdAt  DateTime @default(now())
}